library(dbscan)
library(factoextra)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(magrittr)
library(imputeTS)
library(rpart)
library(class)
library(neuralnet)
library(e1071)
library(ipred)
library(randomForest)
library(gbm)
library(xgboost)
library(kknn)
library(tidymodels)
library(discrim)
library(klaR)
library(rpart.plot)
library(corrplot)
library(dplyr)
library(FactoMineR)
rm(list = ls())
setwd("/Users/lau/Desktop/Cláudia/Mestrado/1º\ ano/2º\ semestre/Deteção\ de\ Fraude/Project/submit/Final")
dados <- read.csv("train.csv", header = TRUE, sep = ",")
teste <- read.csv("test.csv", header = TRUE, sep = ",")
coluna_treino_fraud <- as.factor(dados$is_fraud)
dados_completos <- rbind(dados[,-which(names(dados) == "is_fraud")], teste)
dados_completos <- dados_completos %>%
mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
dados <- dados %>% mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
summary(dados_completos)
summary(dados)
dados_comp_alt <- dados_completos
dados_comp_alt <- dados_comp_alt[, -which(names(dados) == "device_fraud_count")]
dados_comp_alt$payment_type <-as.factor(dados_comp_alt$payment_type)
dados_comp_alt$employment_status <- as.factor(dados_comp_alt$employment_status)
dados_comp_alt$housing_status <- as.factor(dados_comp_alt$housing_status)
dados_comp_alt$device_os <- as.factor(dados_comp_alt$device_os)
dados_comp_alt$source <- as.factor(dados_comp_alt$source)
dados$payment_type <-as.factor(dados$payment_type)
dados$employment_status <- as.factor(dados$employment_status)
dados$housing_status <- as.factor(dados$housing_status)
dados$device_os <- as.factor(dados$device_os)
dados$source <- as.factor(dados$source)
dados_comp_alt$email_is_free <- as.factor(dados_comp_alt$email_is_free)
dados_comp_alt$phone_home_valid <- as.factor(dados_comp_alt$phone_home_valid)
dados_comp_alt$phone_mobile_valid <- as.factor(dados_comp_alt$phone_mobile_valid)
dados_comp_alt$has_other_cards <- as.factor(dados_comp_alt$has_other_cards)
dados_comp_alt$foreign_request <- as.factor(dados_comp_alt$foreign_request)
dados_comp_alt$keep_alive_session <- as.factor(dados_comp_alt$keep_alive_session)
dados$email_is_free <- as.factor(dados$email_is_free)
dados$phone_home_valid <- as.factor(dados$phone_home_valid)
dados$phone_mobile_valid <- as.factor(dados$phone_mobile_valid)
dados$has_other_cards <- as.factor(dados$has_other_cards)
dados$foreign_request <- as.factor(dados$foreign_request)
dados$keep_alive_session <- as.factor(dados$keep_alive_session)
summary(dados_comp_alt)
sapply(dados_comp_alt, class)
percentagem_na <- mean(is.na(dados_comp_alt$prev_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$current_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$employment_status)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$bank_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$has_other_cards)) * 100
print(percentagem_na)
#dados_alt <- dados_alt[, -which(names(dados) == "prev_address_months_count")]
fraudes <- subset(dados, dados$is_fraud==1)
summary(fraudes)
##funcao para calcular a moda
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
dados_preenchidos <- dados_comp_alt
mode_1 <- Mode(dados_preenchidos$prev_address_months_count[!is.na(dados_preenchidos$prev_address_months_count)])
dados_preenchidos$prev_address_months_count[is.na(dados_preenchidos$prev_address_months_count)] <- mode_1
mode_2 <- Mode(dados_preenchidos$current_address_months_count[!is.na(dados_preenchidos$current_address_months_count)])
dados_preenchidos$current_address_months_count[is.na(dados_preenchidos$current_address_months_count)] <- mode_2
mode_3 <- Mode(dados_preenchidos$employment_status[!is.na(dados_preenchidos$employment_status)])
dados_preenchidos$employment_status[is.na(dados_preenchidos$employment_status)] <- mode_3
mode_4 <- Mode(dados_preenchidos$bank_months_count[!is.na(dados_preenchidos$bank_months_count)])
dados_preenchidos$bank_months_count[is.na(dados_preenchidos$bank_months_count)] <- mode_4
mode_5 <- Mode(dados_preenchidos$has_other_cards[!is.na(dados_preenchidos$has_other_cards)])
dados_preenchidos$has_other_cards[is.na(dados_preenchidos$has_other_cards)] <- mode_5
dados_preenchidos$source <- ifelse(is.na(dados_preenchidos$source), "NA", dados_preenchidos$source)
dados_preenchidos$source <- as.factor(dados_preenchidos$source)
summary(dados_preenchidos)
ids_preenchidos <- dados_preenchidos$id
dados_preenchidos2 <- subset(dados_preenchidos, select = -c(id))
dados_preenchidos2
colunas_nao_numericas2 <- sapply(dados_preenchidos2, function(col) !is.numeric(col))
colunas_categoricas2 <- names(dados_preenchidos2)[colunas_nao_numericas2]
dados_one_hot2 <- dados_preenchidos2 %>%
dplyr::select(all_of(colunas_categoricas2)) %>%
mutate_all(as.factor) %>%
model.matrix(~.-1, data = .)
dados_completos2 <- bind_cols(dados_preenchidos2 %>% dplyr::select(-all_of(colunas_categoricas2)), dados_one_hot2)
reducao_pca <- PCA(dados_completos2, graph = FALSE)
reducao_pca <- as.data.frame(reducao_pca$ind$coord[, 1:5])
reducao_svd <- svd(dados_completos2)
reducao_svd <- as.data.frame(reducao_svd$u[, 1:20])
dados_preenchidos2$id <- ids_preenchidos
reducao_pca$id <- ids_preenchidos
reducao_svd$id <- ids_preenchidos
print(reducao_pca)
print(reducao_svd)
dados_treino_preen <- dados_preenchidos2[1:nrow(dados), ]
dados_teste_preen <- dados_preenchidos2[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_svd <- reducao_pca[1:nrow(dados), ]
dados_teste_svd <- reducao_pca[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_pca <- reducao_svd[1:nrow(dados), ]
dados_teste_pca <- reducao_svd[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_preen$is_fraud <- coluna_treino_fraud
dados_treino_svd$is_fraud <- coluna_treino_fraud
dados_treino_pca$is_fraud <- coluna_treino_fraud
summary(dados_teste_preen)
summary(dados_treino_preen)
summary(dados_treino_pca)
summary(dados_treino_svd)
ggplot(dados_treino_preen, aes(x = name_email_similarity, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(title = "Distribuição - name_email_similarity",
x = "name_email_similarity",
y = "Count",
fill = "Fraudulento") +
scale_fill_manual(values = c("blue", "red"), labels = c("Não Fraudulento", "Fraudulento"))
ggplot(dados_treino_preen, aes(x = credit_risk_score, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(x = "Credit Risk Score", y = "Density", fill = "Fraudulent") +
theme_minimal()
ggplot(dados_treino_preen, aes(x = zip_count_4w, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(x = "Zip Count in 4 Weeks", y = "Density", fill = "Fraudulent") +
theme_minimal()
dados_featured_lista_com_fraud <- list(dados_treino_preen,
dados_treino_pca,
dados_treino_svd,
dados_teste_preen,
dados_teste_pca,
dados_teste_svd)
saveRDS(dados_featured_lista_com_fraud, "dados_featured_teste.rds")
library(tidyverse)
library(cluster)
library(dbscan)
library(factoextra)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(magrittr)
library(imputeTS)
library(rpart)
library(class)
library(neuralnet)
library(e1071)
library(ipred)
library(randomForest)
library(gbm)
library(xgboost)
library(kknn)
library(tidymodels)
library(discrim)
library(klaR)
library(rpart.plot)
library(corrplot)
library(dplyr)
library(FactoMineR)
rm(list = ls())
setwd("/Users/lau/Desktop/Cláudia/Mestrado/1º\ ano/2º\ semestre/Deteção\ de\ Fraude/Project/submit/Final")
dados <- read.csv("train.csv", header = TRUE, sep = ",")
teste <- read.csv("test.csv", header = TRUE, sep = ",")
coluna_treino_fraud <- as.factor(dados$is_fraud)
dados_completos <- rbind(dados[,-which(names(dados) == "is_fraud")], teste)
dados_completos <- dados_completos %>%
mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
dados <- dados %>% mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
summary(dados_completos)
summary(dados)
dados_comp_alt <- dados_completos
dados_comp_alt <- dados_comp_alt[, -which(names(dados) == "device_fraud_count")]
dados_comp_alt$payment_type <-as.factor(dados_comp_alt$payment_type)
dados_comp_alt$employment_status <- as.factor(dados_comp_alt$employment_status)
dados_comp_alt$housing_status <- as.factor(dados_comp_alt$housing_status)
dados_comp_alt$device_os <- as.factor(dados_comp_alt$device_os)
dados_comp_alt$source <- as.factor(dados_comp_alt$source)
dados$payment_type <-as.factor(dados$payment_type)
dados$employment_status <- as.factor(dados$employment_status)
dados$housing_status <- as.factor(dados$housing_status)
dados$device_os <- as.factor(dados$device_os)
dados$source <- as.factor(dados$source)
dados_comp_alt$email_is_free <- as.factor(dados_comp_alt$email_is_free)
dados_comp_alt$phone_home_valid <- as.factor(dados_comp_alt$phone_home_valid)
dados_comp_alt$phone_mobile_valid <- as.factor(dados_comp_alt$phone_mobile_valid)
dados_comp_alt$has_other_cards <- as.factor(dados_comp_alt$has_other_cards)
dados_comp_alt$foreign_request <- as.factor(dados_comp_alt$foreign_request)
dados_comp_alt$keep_alive_session <- as.factor(dados_comp_alt$keep_alive_session)
dados$email_is_free <- as.factor(dados$email_is_free)
dados$phone_home_valid <- as.factor(dados$phone_home_valid)
dados$phone_mobile_valid <- as.factor(dados$phone_mobile_valid)
dados$has_other_cards <- as.factor(dados$has_other_cards)
dados$foreign_request <- as.factor(dados$foreign_request)
dados$keep_alive_session <- as.factor(dados$keep_alive_session)
summary(dados_comp_alt)
sapply(dados_comp_alt, class)
percentagem_na <- mean(is.na(dados_comp_alt$prev_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$current_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$employment_status)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$bank_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$has_other_cards)) * 100
print(percentagem_na)
#dados_alt <- dados_alt[, -which(names(dados) == "prev_address_months_count")]
fraudes <- subset(dados, dados$is_fraud==1)
summary(fraudes)
##funcao para calcular a moda
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
dados_preenchidos <- dados_comp_alt
mode_1 <- Mode(dados_preenchidos$prev_address_months_count[!is.na(dados_preenchidos$prev_address_months_count)])
dados_preenchidos$prev_address_months_count[is.na(dados_preenchidos$prev_address_months_count)] <- mode_1
mode_2 <- Mode(dados_preenchidos$current_address_months_count[!is.na(dados_preenchidos$current_address_months_count)])
dados_preenchidos$current_address_months_count[is.na(dados_preenchidos$current_address_months_count)] <- mode_2
mode_3 <- Mode(dados_preenchidos$employment_status[!is.na(dados_preenchidos$employment_status)])
dados_preenchidos$employment_status[is.na(dados_preenchidos$employment_status)] <- mode_3
mode_4 <- Mode(dados_preenchidos$bank_months_count[!is.na(dados_preenchidos$bank_months_count)])
dados_preenchidos$bank_months_count[is.na(dados_preenchidos$bank_months_count)] <- mode_4
mode_5 <- Mode(dados_preenchidos$has_other_cards[!is.na(dados_preenchidos$has_other_cards)])
dados_preenchidos$has_other_cards[is.na(dados_preenchidos$has_other_cards)] <- mode_5
dados_preenchidos$source <- ifelse(is.na(dados_preenchidos$source), "NA", dados_preenchidos$source)
dados_preenchidos$source <- as.factor(dados_preenchidos$source)
summary(dados_preenchidos)
ids_preenchidos <- dados_preenchidos$id
dados_preenchidos2 <- subset(dados_preenchidos, select = -c(id))
dados_preenchidos2
colunas_nao_numericas2 <- sapply(dados_preenchidos2, function(col) !is.numeric(col))
colunas_categoricas2 <- names(dados_preenchidos2)[colunas_nao_numericas2]
dados_one_hot2 <- dados_preenchidos2 %>%
dplyr::select(all_of(colunas_categoricas2)) %>%
mutate_all(as.factor) %>%
model.matrix(~.-1, data = .)
dados_completos2 <- bind_cols(dados_preenchidos2 %>% dplyr::select(-all_of(colunas_categoricas2)), dados_one_hot2)
reducao_pca <- PCA(dados_completos2, graph = FALSE)
reducao_pca <- as.data.frame(reducao_pca$ind$coord[, 1:5])
reducao_svd <- svd(dados_completos2)
reducao_svd <- as.data.frame(reducao_svd$u[, 1:20])
dados_preenchidos2$id <- ids_preenchidos
reducao_pca$id <- ids_preenchidos
reducao_svd$id <- ids_preenchidos
print(reducao_pca)
print(reducao_svd)
dados_treino_preen <- dados_preenchidos2[1:nrow(dados), ]
dados_teste_preen <- dados_preenchidos2[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_svd <- reducao_pca[1:nrow(dados), ]
dados_teste_svd <- reducao_pca[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_pca <- reducao_svd[1:nrow(dados), ]
dados_teste_pca <- reducao_svd[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_preen$is_fraud <- coluna_treino_fraud
dados_treino_svd$is_fraud <- coluna_treino_fraud
dados_treino_pca$is_fraud <- coluna_treino_fraud
summary(dados_teste_preen)
summary(dados_treino_preen)
summary(dados_treino_pca)
summary(dados_treino_svd)
ggplot(dados_treino_preen, aes(x = name_email_similarity, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(title = "Distribuição - name_email_similarity",
x = "name_email_similarity",
y = "Count",
fill = "Fraudulento") +
scale_fill_manual(values = c("blue", "red"), labels = c("Não Fraudulento", "Fraudulento"))
ggplot(dados_treino_preen, aes(x = credit_risk_score, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(x = "Credit Risk Score", y = "Density", fill = "Fraudulent") +
theme_minimal()
ggplot(dados_treino_preen, aes(x = zip_count_4w, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(x = "Zip Count in 4 Weeks", y = "Density", fill = "Fraudulent") +
theme_minimal()
dados_featured_lista_com_fraud <- list(dados_treino_preen,
dados_treino_pca,
dados_treino_svd,
dados_teste_preen,
dados_teste_pca,
dados_teste_svd)
saveRDS(dados_featured_lista_com_fraud, "dados_featured_teste.rds")
rm(list = ls())
setwd("/Users/lau/Desktop/Cláudia/Mestrado/1º\ ano/2º\ semestre/Deteção\ de\ Fraude/Project/submit/Final")
dados <- read.csv("train.csv", header = TRUE, sep = ",")
teste <- read.csv("test.csv", header = TRUE, sep = ",")
coluna_treino_fraud <- as.factor(dados$is_fraud)
dados_completos <- rbind(dados[,-which(names(dados) == "is_fraud")], teste)
dados_completos <- dados_completos %>%
mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
dados <- dados %>% mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
summary(dados_completos)
summary(dados)
dados_comp_alt <- dados_completos
dados_comp_alt <- dados_comp_alt[, -which(names(dados) == "device_fraud_count")]
dados_comp_alt$payment_type <-as.factor(dados_comp_alt$payment_type)
dados_comp_alt$employment_status <- as.factor(dados_comp_alt$employment_status)
dados_comp_alt$housing_status <- as.factor(dados_comp_alt$housing_status)
dados_comp_alt$device_os <- as.factor(dados_comp_alt$device_os)
dados_comp_alt$source <- as.factor(dados_comp_alt$source)
dados$payment_type <-as.factor(dados$payment_type)
dados$employment_status <- as.factor(dados$employment_status)
dados$housing_status <- as.factor(dados$housing_status)
dados$device_os <- as.factor(dados$device_os)
dados$source <- as.factor(dados$source)
dados_comp_alt$email_is_free <- as.factor(dados_comp_alt$email_is_free)
dados_comp_alt$phone_home_valid <- as.factor(dados_comp_alt$phone_home_valid)
dados_comp_alt$phone_mobile_valid <- as.factor(dados_comp_alt$phone_mobile_valid)
dados_comp_alt$has_other_cards <- as.factor(dados_comp_alt$has_other_cards)
dados_comp_alt$foreign_request <- as.factor(dados_comp_alt$foreign_request)
dados_comp_alt$keep_alive_session <- as.factor(dados_comp_alt$keep_alive_session)
dados$email_is_free <- as.factor(dados$email_is_free)
dados$phone_home_valid <- as.factor(dados$phone_home_valid)
dados$phone_mobile_valid <- as.factor(dados$phone_mobile_valid)
dados$has_other_cards <- as.factor(dados$has_other_cards)
dados$foreign_request <- as.factor(dados$foreign_request)
dados$keep_alive_session <- as.factor(dados$keep_alive_session)
summary(dados_comp_alt)
sapply(dados_comp_alt, class)
percentagem_na <- mean(is.na(dados_comp_alt$prev_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$current_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$employment_status)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$bank_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$has_other_cards)) * 100
print(percentagem_na)
#dados_alt <- dados_alt[, -which(names(dados) == "prev_address_months_count")]
fraudes <- subset(dados, dados$is_fraud==1)
summary(fraudes)
ids_preenchidos <- dados_preenchidos$id
library(tidyverse)
library(cluster)
library(dbscan)
library(factoextra)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(magrittr)
library(imputeTS)
library(rpart)
library(class)
library(neuralnet)
library(e1071)
library(ipred)
library(randomForest)
library(gbm)
library(xgboost)
library(kknn)
library(tidymodels)
library(discrim)
library(klaR)
library(rpart.plot)
library(corrplot)
library(dplyr)
library(FactoMineR)
rm(list = ls())
setwd("/Users/lau/Desktop/Cláudia/Mestrado/1º\ ano/2º\ semestre/Deteção\ de\ Fraude/Project/submit/Final")
dados <- read.csv("train.csv", header = TRUE, sep = ",")
teste <- read.csv("test.csv", header = TRUE, sep = ",")
coluna_treino_fraud <- as.factor(dados$is_fraud)
dados_completos <- rbind(dados[,-which(names(dados) == "is_fraud")], teste)
dados_completos <- dados_completos %>%
mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
dados <- dados %>% mutate(prev_address_months_count = na_if(prev_address_months_count, -1),
current_address_months_count = na_if(current_address_months_count, -1),
bank_months_count = na_if(bank_months_count, -1))
summary(dados_completos)
summary(dados)
dados_comp_alt <- dados_completos
dados_comp_alt <- dados_comp_alt[, -which(names(dados) == "device_fraud_count")]
dados_comp_alt$payment_type <-as.factor(dados_comp_alt$payment_type)
dados_comp_alt$employment_status <- as.factor(dados_comp_alt$employment_status)
dados_comp_alt$housing_status <- as.factor(dados_comp_alt$housing_status)
dados_comp_alt$device_os <- as.factor(dados_comp_alt$device_os)
dados_comp_alt$source <- as.factor(dados_comp_alt$source)
dados$payment_type <-as.factor(dados$payment_type)
dados$employment_status <- as.factor(dados$employment_status)
dados$housing_status <- as.factor(dados$housing_status)
dados$device_os <- as.factor(dados$device_os)
dados$source <- as.factor(dados$source)
dados_comp_alt$email_is_free <- as.factor(dados_comp_alt$email_is_free)
dados_comp_alt$phone_home_valid <- as.factor(dados_comp_alt$phone_home_valid)
dados_comp_alt$phone_mobile_valid <- as.factor(dados_comp_alt$phone_mobile_valid)
dados_comp_alt$has_other_cards <- as.factor(dados_comp_alt$has_other_cards)
dados_comp_alt$foreign_request <- as.factor(dados_comp_alt$foreign_request)
dados_comp_alt$keep_alive_session <- as.factor(dados_comp_alt$keep_alive_session)
dados$email_is_free <- as.factor(dados$email_is_free)
dados$phone_home_valid <- as.factor(dados$phone_home_valid)
dados$phone_mobile_valid <- as.factor(dados$phone_mobile_valid)
dados$has_other_cards <- as.factor(dados$has_other_cards)
dados$foreign_request <- as.factor(dados$foreign_request)
dados$keep_alive_session <- as.factor(dados$keep_alive_session)
summary(dados_comp_alt)
sapply(dados_comp_alt, class)
percentagem_na <- mean(is.na(dados_comp_alt$prev_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$current_address_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$employment_status)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$bank_months_count)) * 100
print(percentagem_na)
percentagem_na <- mean(is.na(dados_comp_alt$has_other_cards)) * 100
print(percentagem_na)
#dados_alt <- dados_alt[, -which(names(dados) == "prev_address_months_count")]
fraudes <- subset(dados, dados$is_fraud==1)
summary(fraudes)
##funcao para calcular a moda
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
dados_preenchidos <- dados_comp_alt
mode_1 <- Mode(dados_preenchidos$prev_address_months_count[!is.na(dados_preenchidos$prev_address_months_count)])
dados_preenchidos$prev_address_months_count[is.na(dados_preenchidos$prev_address_months_count)] <- mode_1
mode_2 <- Mode(dados_preenchidos$current_address_months_count[!is.na(dados_preenchidos$current_address_months_count)])
dados_preenchidos$current_address_months_count[is.na(dados_preenchidos$current_address_months_count)] <- mode_2
mode_3 <- Mode(dados_preenchidos$employment_status[!is.na(dados_preenchidos$employment_status)])
dados_preenchidos$employment_status[is.na(dados_preenchidos$employment_status)] <- mode_3
mode_4 <- Mode(dados_preenchidos$bank_months_count[!is.na(dados_preenchidos$bank_months_count)])
dados_preenchidos$bank_months_count[is.na(dados_preenchidos$bank_months_count)] <- mode_4
mode_5 <- Mode(dados_preenchidos$has_other_cards[!is.na(dados_preenchidos$has_other_cards)])
dados_preenchidos$has_other_cards[is.na(dados_preenchidos$has_other_cards)] <- mode_5
dados_preenchidos$source <- ifelse(is.na(dados_preenchidos$source), "NA", dados_preenchidos$source)
dados_preenchidos$source <- as.factor(dados_preenchidos$source)
summary(dados_preenchidos)
ids_preenchidos <- dados_preenchidos$id
dados_preenchidos2 <- subset(dados_preenchidos, select = -c(id))
summary(dados_preenchidos2)
colunas_nao_numericas2 <- sapply(dados_preenchidos2, function(col) !is.numeric(col))
colunas_categoricas2 <- names(dados_preenchidos2)[colunas_nao_numericas2]
dados_one_hot2 <- dados_preenchidos2 %>%
dplyr::select(all_of(colunas_categoricas2)) %>%
mutate_all(as.factor) %>%
model.matrix(~.-1, data = .)
dados_completos2 <- bind_cols(dados_preenchidos2 %>% dplyr::select(-all_of(colunas_categoricas2)), dados_one_hot2)
reducao_pca <- PCA(dados_completos2, graph = FALSE)
reducao_pca <- as.data.frame(reducao_pca$ind$coord[, 1:5])
reducao_svd <- svd(dados_completos2)
reducao_svd <- as.data.frame(reducao_svd$u[, 1:20])
dados_preenchidos2$id <- ids_preenchidos
reducao_pca$id <- ids_preenchidos
reducao_svd$id <- ids_preenchidos
print(reducao_pca)
print(reducao_svd)
dados_treino_preen <- dados_preenchidos2[1:nrow(dados), ]
dados_teste_preen <- dados_preenchidos2[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_svd <- reducao_pca[1:nrow(dados), ]
dados_teste_svd <- reducao_pca[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_pca <- reducao_svd[1:nrow(dados), ]
dados_teste_pca <- reducao_svd[(nrow(dados) + 1):nrow(dados_completos), ]
dados_treino_preen$is_fraud <- coluna_treino_fraud
dados_treino_svd$is_fraud <- coluna_treino_fraud
dados_treino_pca$is_fraud <- coluna_treino_fraud
summary(dados_teste_preen)
summary(dados_treino_preen)
summary(dados_treino_pca)
summary(dados_treino_svd)
ggplot(dados_treino_preen, aes(x = name_email_similarity, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(title = "Distribuição - name_email_similarity",
x = "name_email_similarity",
y = "Count",
fill = "Fraudulento") +
scale_fill_manual(values = c("blue", "red"), labels = c("Não Fraudulento", "Fraudulento"))
ggplot(dados_treino_preen, aes(x = credit_risk_score, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(x = "Credit Risk Score", y = "Density", fill = "Fraudulent") +
theme_minimal()
ggplot(dados_treino_preen, aes(x = zip_count_4w, fill = factor(is_fraud))) +
geom_density(alpha = 0.5) +
labs(x = "Zip Count in 4 Weeks", y = "Density", fill = "Fraudulent") +
theme_minimal()
dados_featured_lista_com_fraud <- list(dados_treino_preen,
dados_treino_pca,
dados_treino_svd,
dados_teste_preen,
dados_teste_pca,
dados_teste_svd)
saveRDS(dados_featured_lista_com_fraud, "dados_featured_teste.rds")
