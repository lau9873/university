resultado <- cbind(dados_teste, previsao)
percentagem_erro_AD <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro na AD")
percentagem_erro_KNN <- -1
})
#K-Nearest Neighbors (KNN)
tryCatch({
k <- 5
modelo_knn <- knn(train = dados_treino[, -ncol(dados_treino)], test = dados_teste[, -ncol(dados_teste)], cl = dados_treino$is_fraud, k = k)
previsao <- as.factor(modelo_knn)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_KNN <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no KNN")
percentagem_erro_KNN <- -1
})
#Naive Bayes
tryCatch({
dados_treino1 <- dados_treino
dados_teste1 <- dados_teste
dados_treino1$is_fraud <- as.factor(dados_treino1$is_fraud)
dados_teste1$is_fraud <- as.factor(dados_teste1$is_fraud)
rec <- recipe(is_fraud ~.,dados_treino1)
rec <- rec %>% step_normalize(all_numeric_predictors()) %>% prep()
dados_treino1 <- rec %>% bake(new_data=dados_treino1)
dados_teste1 <- rec %>% bake(new_data=dados_teste1)
model_nb <- naive_Bayes(mode="classification")
nb_fit <- model_nb %>% fit(is_fraud ~ ., data = dados_treino1)
resultado <- dados_teste1 %>% dplyr::select(is_fraud) %>%
bind_cols(predict(nb_fit, dados_teste1)) %>%
bind_cols(predict(nb_fit, dados_teste1, type = "prob"))
percentagem_erro_NB <- sum(resultado$is_fraud != resultado$.pred_class) / nrow(resultado) * 100
rm(resultado)
})
#Neural Networks
tryCatch({
modelo_nn <- neuralnet(is_fraud ~ ., data = dados_treino, hidden = c(4, 2))
previsao <- compute(modelo_nn, dados_teste[, -ncol(dados_teste)])$net.result
previsao <- ifelse(previsao >= 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_NN <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(modelo_nn)
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no NN")
percentagem_erro_NN <- -1
})
#Support Vector Machines (SVM)
tryCatch({
modelo_svm <- svm(is_fraud ~ ., data = dados_treino, type = "C")
previsao <- predict(modelo_svm, newdata = dados_teste)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_SVM <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no SVM")
percentagem_erro_SVM <- -1
})
#Random Forest
tryCatch({
dados_treino$is_fraud <- as.factor(dados_treino$is_fraud)
dados_teste$is_fraud <- as.factor(dados_teste$is_fraud)
model_rf <- rand_forest(mode = "classification", trees = 100) %>%
set_engine("ranger", importance = "impurity")
rf_fit <- model_rf %>%
fit(is_fraud ~ ., data = dados_treino)
resultado <- dados_teste %>%
dplyr::select(is_fraud) %>%
add_column(predict(rf_fit, dados_teste))
percentagem_erro_RF <- sum(dados_teste$is_fraud != resultado$.pred_class) / nrow(resultado) *100
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no GBM")
percentagem_erro_GBM <- -1
})
#Gradient Boosting Machines (GBM)
tryCatch({
dados_treino$is_fraud <- as.numeric(as.factor(dados_treino$is_fraud))-1
dados_teste$is_fraud <- as.numeric(as.factor(dados_teste$is_fraud))-1
modelo_boosting <- gbm(is_fraud ~ ., data = dados_treino, distribution = "bernoulli", n.trees = 100)
previsao <- predict(modelo_boosting, newdata = dados_teste, n.trees = 50, type = "response")
previsao_classes <- ifelse(previsao > 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao = previsao_classes)
percentagem_erro_GBM <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
rm(previsao_classes)
}, error = function(err) {
print("Ocorreu um erro no GBM")
percentagem_erro_GBM <- -1
})
#XGBoost
tryCatch({
dtrain <- xgb.DMatrix(data = as.matrix(dados_treino[, -ncol(dados_treino)]), label = dados_treino$is_fraud)
dtest <- xgb.DMatrix(data = as.matrix(dados_teste[, -ncol(dados_teste)]), label = dados_teste$is_fraud)
param <- list( objective = "binary:logistic", eval_metric = "error")
modelo_xgb <- xgboost(data = dtrain, params = param, nrounds = 100,verbose = FALSE)
previsao <- predict(modelo_xgb, dtest)
previsao_classes <- ifelse(previsao > 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao = previsao_classes)
percentagem_erro_XGB <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
dados_treino$is_fraud <- as.factor(as.numeric(dados_treino$is_fraud) + 1)
rm(previsao)
rm(resultado)
rm(previsao_classes)
}, error = function(err) {
print("Ocorreu um erro no XGB")
percentagem_erro_XGB <- -1
})
##
print(paste("Percentagem da amostra:", percentagem_total*100, "%"))
percentagens_de_erro_lista <- list(percentagem_erro_AD, percentagem_erro_KNN,
percentagem_erro_NB, percentagem_erro_NN,
percentagem_erro_SVM, percentagem_erro_RF,
percentagem_erro_GBM, percentagem_erro_XGB)
percentagem_erro_nome_lista <- c("AD", "KNN", "NB", "NN", "SVM", "RF", "GBM", "XGB")
for (m in 1:8){
percentagens_de_erro <- percentagens_de_erro_lista[[m]]
percentagem_erro_nome <-percentagem_erro_nome_lista[m]
print(paste("Percentagem de erro de", percentagem_erro_nome, ": ",percentagens_de_erro))
matriz[f, m, p] <- percentagens_de_erro
}
}
}
}
num_componentes_lista <- c(5)
percentagem_total_lista <- c(0.1, 0.2, 0.3, 0.5, 0.6, 0.7)
matriz <- array(0, dim = c(6, 8, 6))
#features,modelo,percentagem
for (num_componentes in num_componentes_lista){
dados_normalizados <- scale(dados_sem_na[, -which(names(dados) == "is_fraud")])
dados_normalizados_p <- scale(dados_preenchidos[, -which(names(dados) == "is_fraud")])
pca <- prcomp(dados_normalizados)
reducao_pca <- predict(pca, newdata = dados_normalizados)[, 1:num_componentes]
svd_resultado <- svd(dados_normalizados)
reducao_svd <- dados_normalizados %*% svd_resultado$v[, 1:num_componentes]
pca <- prcomp(dados_normalizados_p)
reducao_pca_p <- predict(pca, newdata = dados_normalizados_p)[, 1:num_componentes]
svd_resultado <- svd(dados_normalizados_p)
reducao_svd_p <- dados_normalizados_p %*% svd_resultado$v[, 1:num_componentes]
dados_sem_na$is_fraud <- as.factor(dados_sem_na$is_fraud)
dados_preenchidos$is_fraud <- as.factor(dados_preenchidos$is_fraud)
reducao_pca <- cbind(reducao_pca, is_fraud = dados_sem_na$is_fraud)
reducao_svd <- cbind(reducao_svd, is_fraud = dados_sem_na$is_fraud)
reducao_pca_p <- cbind(reducao_pca_p, is_fraud = dados_preenchidos$is_fraud)
reducao_svd_p <- cbind(reducao_svd_p, is_fraud = dados_preenchidos$is_fraud)
dados_sem_na$is_fraud <- as.numeric(dados_sem_na$is_fraud)
dados_preenchidos$is_fraud <- as.numeric(dados_preenchidos$is_fraud)
dados_featured_lista <- list(dados_sem_na, dados_preenchidos,
reducao_pca, reducao_pca_p,
reducao_svd, reducao_svd_p)
dados_featured_nome_lista <- c("dados com valores NA removidos",
"dados com valores NA preenchidos",
"dados com redução PCA e valores NA removidos",
"dados com redução PCA e valores NA preenchidos",
"dados com redução SVD e valores NA removidos",
"dados com redução SVD e valores NA preenchidos")
print(paste("Numero de componentes:", num_componentes))
for (f in 1:6){
dados_featured <- dados_featured_lista[[f]]
dados_featured_nome <- dados_featured_nome_lista[f]
print(paste("Tipos de featuring usada: ",dados_featured_nome))
for (p in 1:6){
dados_amostra <- dados_featured
# Divisão em conjunto de treino e teste
percentagem_treino <- percentagem_total_lista[p]
set.seed(1234)
split_dados <- dados_featured %>% initial_split(prop=percentagem_total,is_fraud)
dados_treino <- training(split_dados)
dados_teste <- testing(split_dados)
dados_treino <- as.data.frame(dados_treino)
dados_teste <- as.data.frame(dados_teste)
percentagem_erro_AD <- -1
percentagem_erro_KNN <- -1
percentagem_erro_NB <- -1
percentagem_erro_NN <- -1
percentagem_erro_SVM <- -1
percentagem_erro_RF <- -1
#Árvores de Decisão
tryCatch({
modelo <- rpart(is_fraud ~ ., data = dados_treino, method = "class")
previsao <- predict(modelo, newdata = dados_teste, type = "class")
resultado <- cbind(dados_teste, previsao)
percentagem_erro_AD <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro na AD")
percentagem_erro_KNN <- -1
})
#K-Nearest Neighbors (KNN)
tryCatch({
k <- 5
modelo_knn <- knn(train = dados_treino[, -ncol(dados_treino)], test = dados_teste[, -ncol(dados_teste)], cl = dados_treino$is_fraud, k = k)
previsao <- as.factor(modelo_knn)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_KNN <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no KNN")
percentagem_erro_KNN <- -1
})
#Naive Bayes
tryCatch({
dados_treino1 <- dados_treino
dados_teste1 <- dados_teste
dados_treino1$is_fraud <- as.factor(dados_treino1$is_fraud)
dados_teste1$is_fraud <- as.factor(dados_teste1$is_fraud)
rec <- recipe(is_fraud ~.,dados_treino1)
rec <- rec %>% step_normalize(all_numeric_predictors()) %>% prep()
dados_treino1 <- rec %>% bake(new_data=dados_treino1)
dados_teste1 <- rec %>% bake(new_data=dados_teste1)
model_nb <- naive_Bayes(mode="classification")
nb_fit <- model_nb %>% fit(is_fraud ~ ., data = dados_treino1)
resultado <- dados_teste1 %>% dplyr::select(is_fraud) %>%
bind_cols(predict(nb_fit, dados_teste1)) %>%
bind_cols(predict(nb_fit, dados_teste1, type = "prob"))
percentagem_erro_NB <- sum(resultado$is_fraud != resultado$.pred_class) / nrow(resultado) * 100
rm(resultado)
})
#Neural Networks
tryCatch({
modelo_nn <- neuralnet(is_fraud ~ ., data = dados_treino, hidden = c(4, 2))
previsao <- compute(modelo_nn, dados_teste[, -ncol(dados_teste)])$net.result
previsao <- ifelse(previsao >= 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_NN <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(modelo_nn)
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no NN")
percentagem_erro_NN <- -1
})
#Support Vector Machines (SVM)
tryCatch({
modelo_svm <- svm(is_fraud ~ ., data = dados_treino, type = "C")
previsao <- predict(modelo_svm, newdata = dados_teste)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_SVM <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no SVM")
percentagem_erro_SVM <- -1
})
#Random Forest
tryCatch({
dados_treino$is_fraud <- as.factor(dados_treino$is_fraud)
dados_teste$is_fraud <- as.factor(dados_teste$is_fraud)
model_rf <- rand_forest(mode = "classification", trees = 100) %>%
set_engine("ranger", importance = "impurity")
rf_fit <- model_rf %>%
fit(is_fraud ~ ., data = dados_treino)
resultado <- dados_teste %>%
dplyr::select(is_fraud) %>%
add_column(predict(rf_fit, dados_teste))
percentagem_erro_RF <- sum(dados_teste$is_fraud != resultado$.pred_class) / nrow(resultado) *100
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no GBM")
percentagem_erro_GBM <- -1
})
#Gradient Boosting Machines (GBM)
tryCatch({
dados_treino$is_fraud <- as.numeric(as.factor(dados_treino$is_fraud))-1
dados_teste$is_fraud <- as.numeric(as.factor(dados_teste$is_fraud))-1
modelo_boosting <- gbm(is_fraud ~ ., data = dados_treino, distribution = "bernoulli", n.trees = 100)
previsao <- predict(modelo_boosting, newdata = dados_teste, n.trees = 50, type = "response")
previsao_classes <- ifelse(previsao > 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao = previsao_classes)
percentagem_erro_GBM <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
rm(previsao_classes)
}, error = function(err) {
print("Ocorreu um erro no GBM")
percentagem_erro_GBM <- -1
})
#XGBoost
tryCatch({
dtrain <- xgb.DMatrix(data = as.matrix(dados_treino[, -ncol(dados_treino)]), label = dados_treino$is_fraud)
dtest <- xgb.DMatrix(data = as.matrix(dados_teste[, -ncol(dados_teste)]), label = dados_teste$is_fraud)
param <- list( objective = "binary:logistic", eval_metric = "error")
modelo_xgb <- xgboost(data = dtrain, params = param, nrounds = 100,verbose = FALSE)
previsao <- predict(modelo_xgb, dtest)
previsao_classes <- ifelse(previsao > 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao = previsao_classes)
percentagem_erro_XGB <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
dados_treino$is_fraud <- as.factor(as.numeric(dados_treino$is_fraud) + 1)
rm(previsao)
rm(resultado)
rm(previsao_classes)
}, error = function(err) {
print("Ocorreu um erro no XGB")
percentagem_erro_XGB <- -1
})
##
print(paste("Percentagem da amostra:", percentagem_total*100, "%"))
percentagens_de_erro_lista <- list(percentagem_erro_AD, percentagem_erro_KNN,
percentagem_erro_NB, percentagem_erro_NN,
percentagem_erro_SVM, percentagem_erro_RF,
percentagem_erro_GBM, percentagem_erro_XGB)
percentagem_erro_nome_lista <- c("AD", "KNN", "NB", "NN", "SVM", "RF", "GBM", "XGB")
for (m in 1:8){
percentagens_de_erro <- percentagens_de_erro_lista[[m]]
percentagem_erro_nome <-percentagem_erro_nome_lista[m]
print(paste("Percentagem de erro de", percentagem_erro_nome, ": ",percentagens_de_erro))
matriz[f, m, p] <- percentagens_de_erro
}
}
}
}
num_componentes_lista <- c(5)
percentagem_total_lista <- c(0.1, 0.2, 0.3, 0.5, 0.6, 0.7)
matriz <- array(0, dim = c(6, 8, 6))
#features,modelo,percentagem
for (num_componentes in num_componentes_lista){
dados_normalizados <- scale(dados_sem_na[, -which(names(dados) == "is_fraud")])
dados_normalizados_p <- scale(dados_preenchidos[, -which(names(dados) == "is_fraud")])
pca <- prcomp(dados_normalizados)
reducao_pca <- predict(pca, newdata = dados_normalizados)[, 1:num_componentes]
svd_resultado <- svd(dados_normalizados)
reducao_svd <- dados_normalizados %*% svd_resultado$v[, 1:num_componentes]
pca <- prcomp(dados_normalizados_p)
reducao_pca_p <- predict(pca, newdata = dados_normalizados_p)[, 1:num_componentes]
svd_resultado <- svd(dados_normalizados_p)
reducao_svd_p <- dados_normalizados_p %*% svd_resultado$v[, 1:num_componentes]
dados_sem_na$is_fraud <- as.factor(dados_sem_na$is_fraud)
dados_preenchidos$is_fraud <- as.factor(dados_preenchidos$is_fraud)
reducao_pca <- cbind(reducao_pca, is_fraud = dados_sem_na$is_fraud)
reducao_svd <- cbind(reducao_svd, is_fraud = dados_sem_na$is_fraud)
reducao_pca_p <- cbind(reducao_pca_p, is_fraud = dados_preenchidos$is_fraud)
reducao_svd_p <- cbind(reducao_svd_p, is_fraud = dados_preenchidos$is_fraud)
dados_sem_na$is_fraud <- as.numeric(dados_sem_na$is_fraud)
dados_preenchidos$is_fraud <- as.numeric(dados_preenchidos$is_fraud)
dados_featured_lista <- list(dados_sem_na, dados_preenchidos,
reducao_pca, reducao_pca_p,
reducao_svd, reducao_svd_p)
dados_featured_nome_lista <- c("dados com valores NA removidos",
"dados com valores NA preenchidos",
"dados com redução PCA e valores NA removidos",
"dados com redução PCA e valores NA preenchidos",
"dados com redução SVD e valores NA removidos",
"dados com redução SVD e valores NA preenchidos")
print(paste("Numero de componentes:", num_componentes))
for (f in 1:6){
dados_featured <- dados_featured_lista[[f]]
dados_featured_nome <- dados_featured_nome_lista[f]
print(paste("Tipos de featuring usada: ",dados_featured_nome))
for (p in 1:6){
dados_amostra <- dados_featured
# Divisão em conjunto de treino e teste
percentagem_treino <- percentagem_total_lista[p]
set.seed(1234)
tamanho_treino <- floor(percentagem_treino * nrow(dados_amostra))
tamanho_teste <- nrow(dados_amostra) - tamanho_treino
indices <- sample(1:nrow(dados_amostra))
dados_treino <- dados_amostra[indices[1:tamanho_treino], ]
dados_teste <- dados_amostra[indices[(tamanho_treino + 1):nrow(dados_amostra)], ]
dados_treino <- as.data.frame(dados_treino)
dados_teste <- as.data.frame(dados_teste)
percentagem_erro_AD <- -1
percentagem_erro_KNN <- -1
percentagem_erro_NB <- -1
percentagem_erro_NN <- -1
percentagem_erro_SVM <- -1
percentagem_erro_RF <- -1
#Árvores de Decisão
tryCatch({
modelo <- rpart(is_fraud ~ ., data = dados_treino, method = "class")
previsao <- predict(modelo, newdata = dados_teste, type = "class")
resultado <- cbind(dados_teste, previsao)
percentagem_erro_AD <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro na AD")
percentagem_erro_KNN <- -1
})
#K-Nearest Neighbors (KNN)
tryCatch({
k <- 5
modelo_knn <- knn(train = dados_treino[, -ncol(dados_treino)], test = dados_teste[, -ncol(dados_teste)], cl = dados_treino$is_fraud, k = k)
previsao <- as.factor(modelo_knn)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_KNN <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no KNN")
percentagem_erro_KNN <- -1
})
#Naive Bayes
tryCatch({
dados_treino1 <- dados_treino
dados_teste1 <- dados_teste
dados_treino1$is_fraud <- as.factor(dados_treino1$is_fraud)
dados_teste1$is_fraud <- as.factor(dados_teste1$is_fraud)
rec <- recipe(is_fraud ~.,dados_treino1)
rec <- rec %>% step_normalize(all_numeric_predictors()) %>% prep()
dados_treino1 <- rec %>% bake(new_data=dados_treino1)
dados_teste1 <- rec %>% bake(new_data=dados_teste1)
model_nb <- naive_Bayes(mode="classification")
nb_fit <- model_nb %>% fit(is_fraud ~ ., data = dados_treino1)
resultado <- dados_teste1 %>% dplyr::select(is_fraud) %>%
bind_cols(predict(nb_fit, dados_teste1)) %>%
bind_cols(predict(nb_fit, dados_teste1, type = "prob"))
percentagem_erro_NB <- sum(resultado$is_fraud != resultado$.pred_class) / nrow(resultado) * 100
rm(resultado)
})
#Neural Networks
tryCatch({
modelo_nn <- neuralnet(is_fraud ~ ., data = dados_treino, hidden = c(4, 2))
previsao <- compute(modelo_nn, dados_teste[, -ncol(dados_teste)])$net.result
previsao <- ifelse(previsao >= 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_NN <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(modelo_nn)
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no NN")
percentagem_erro_NN <- -1
})
#Support Vector Machines (SVM)
tryCatch({
modelo_svm <- svm(is_fraud ~ ., data = dados_treino, type = "C")
previsao <- predict(modelo_svm, newdata = dados_teste)
resultado <- cbind(dados_teste, previsao)
percentagem_erro_SVM <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no SVM")
percentagem_erro_SVM <- -1
})
#Random Forest
tryCatch({
dados_treino$is_fraud <- as.factor(dados_treino$is_fraud)
dados_teste$is_fraud <- as.factor(dados_teste$is_fraud)
model_rf <- rand_forest(mode = "classification", trees = 100) %>%
set_engine("ranger", importance = "impurity")
rf_fit <- model_rf %>%
fit(is_fraud ~ ., data = dados_treino)
resultado <- dados_teste %>%
dplyr::select(is_fraud) %>%
add_column(predict(rf_fit, dados_teste))
percentagem_erro_RF <- sum(dados_teste$is_fraud != resultado$.pred_class) / nrow(resultado) *100
rm(resultado)
}, error = function(err) {
print("Ocorreu um erro no GBM")
percentagem_erro_GBM <- -1
})
#Gradient Boosting Machines (GBM)
tryCatch({
dados_treino$is_fraud <- as.numeric(as.factor(dados_treino$is_fraud))-1
dados_teste$is_fraud <- as.numeric(as.factor(dados_teste$is_fraud))-1
modelo_boosting <- gbm(is_fraud ~ ., data = dados_treino, distribution = "bernoulli", n.trees = 100)
previsao <- predict(modelo_boosting, newdata = dados_teste, n.trees = 50, type = "response")
previsao_classes <- ifelse(previsao > 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao = previsao_classes)
percentagem_erro_GBM <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
rm(previsao)
rm(resultado)
rm(previsao_classes)
}, error = function(err) {
print("Ocorreu um erro no GBM")
percentagem_erro_GBM <- -1
})
#XGBoost
tryCatch({
dtrain <- xgb.DMatrix(data = as.matrix(dados_treino[, -ncol(dados_treino)]), label = dados_treino$is_fraud)
dtest <- xgb.DMatrix(data = as.matrix(dados_teste[, -ncol(dados_teste)]), label = dados_teste$is_fraud)
param <- list( objective = "binary:logistic", eval_metric = "error")
modelo_xgb <- xgboost(data = dtrain, params = param, nrounds = 100,verbose = FALSE)
previsao <- predict(modelo_xgb, dtest)
previsao_classes <- ifelse(previsao > 0.5, 1, 0)
resultado <- cbind(dados_teste, previsao = previsao_classes)
percentagem_erro_XGB <- sum(dados_teste$is_fraud != resultado$previsao) / nrow(resultado) * 100
dados_treino$is_fraud <- as.factor(as.numeric(dados_treino$is_fraud) + 1)
rm(previsao)
rm(resultado)
rm(previsao_classes)
}, error = function(err) {
print("Ocorreu um erro no XGB")
percentagem_erro_XGB <- -1
})
##
print(paste("Percentagem da amostra:", percentagem_total*100, "%"))
percentagens_de_erro_lista <- list(percentagem_erro_AD, percentagem_erro_KNN,
percentagem_erro_NB, percentagem_erro_NN,
percentagem_erro_SVM, percentagem_erro_RF,
percentagem_erro_GBM, percentagem_erro_XGB)
percentagem_erro_nome_lista <- c("AD", "KNN", "NB", "NN", "SVM", "RF", "GBM", "XGB")
for (m in 1:8){
percentagens_de_erro <- percentagens_de_erro_lista[[m]]
percentagem_erro_nome <-percentagem_erro_nome_lista[m]
print(paste("Percentagem de erro de", percentagem_erro_nome, ": ",percentagens_de_erro))
matriz[f, m, p] <- percentagens_de_erro
}
}
}
}
